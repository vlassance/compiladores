http://karmin.ch/ebnf.php?syntax="Diagrama de Sintaxe da Linguagem CZAR"{
PROGRAM         = IMPORTS DECLS_GLOBAIS DEF_PROCS_FUNCS DEF_MAIN.
IMPORTS         = { "import" "<" IDENT ">" { "," "<" IDENT ">" } ";" }.
DECLS_GLOBAIS   = { DEF_TIPO | DECL_CONST | DECL_VAR }.
DEF_TIPO        = "struct" IDENT "{" { DECL_CONST | DECL_VAR } "}" ";".
DECL_CONST      = "const" DECL_VAR.
DECL_VAR        = TIPO IDENT [ "=" EXPR ] { "," IDENT [ "=" EXPR ] } ";".
DEF_PROCS_FUNCS = { PROC | FUNC }.
FUNC            = TIPO IDENT LIST_PARAMS "{" { INSTR } "}".
PROC            = "void" IDENT LIST_PARAMS "{" { INSTR_SEM_RET } "}".
LIST_PARAMS     = "(" [ [ "ref" ] TIPO IDENT ] { "," [ "ref" ] TIPO IDENT } ")".
DEF_MAIN        = "main" "(" ")" "{" { INSTR_SEM_RET } "}".
INSTR           = INSTR_SEM_RET | ( "return" EXPR ";" ).
INSTR_SEM_RET   = DEF_TIPO | DECL_CONST | DECL_VAR | ATRIB | PROC_CALL | FLOW_CONTROL.
ATRIB           = ATRIB_SEM_PT ";".
ATRIB_SEM_PT    = IDENT_CHAVES OPER_ATRIB EXPR { "," IDENT_CHAVES "=" EXPR }.
PROC_CALL       = IDENT "(" [ EXPR ] { "," EXPR } ")" ";".
FLOW_CONTROL    = FOR_CONTROL | WHILE_CONTROL | IF_CONTROL | IFELSE_CONTROL.
FOR_CONTROL     = "for" "(" DECL_VAR COND ";" ATRIB_SEM_PT ")" "{" { INSTR } "}".
WHILE_CONTROL   = "while" "(" COND ")" "{" { INSTR } "}".
IF_CONTROL      = "if" "(" COND ")" "{" { INSTR } "}".
IFELSE_CONTROL  = IF_CONTROL "else" "{" { INSTR } "}".
TIPO            = IDENT { "[" "]" }.
IDENT_CHAVES    = IDENT { "[" INT_POSITIVO "]" }.
IDENT           = (LETRA_MIN | LETRA_MAI | "_") {LETRA_MIN | LETRA_MAI | "_" | "." | DIGITO}.
FUNCTION_CALL   = IDENT "(" [ EXPR ] { "," EXPR } ")".
COND            = (EXPR OPER_COMP EXPR) | COND OPER_BOOL COND | ("not" COND) | IDENT_CHAVES | BOOL.
BOOL            = "true" | "false".
OPER_ATRIB      = ["%2B" | "-" | "*" | "/" | "%25"] "=".
OPER_BOOL       = "and" | "or".
OPER_COMP       = ("=" | "!" | "<" | ">") "=".
OPER_ARIT       = "%2B" | "-" | "*" | "/" | "%25".
EXPR            = (EXPR OPER_ARIT EXPR) | FUNCTION_CALL | INT | STRING | CHAR | DOUBLE | BOOL | IDENT_CHAVES.
STRING          = "aspas_duplas" (LETRA_MIN | LETRA_MAI | DIGITO | "_" | ".") "aspas_duplas".
CHAR            = "'" (CHAR_COM_BARRA | LETRA_MIN | LETRA_MAI | DIGITO | "_" | ".") "'".
CHAR_COM_BARRA  = "barra_invertida" ("0" | LETRA_MIN | "barra_invertida" | "'").
LETRA_MIN       = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z".
LETRA_MAI       = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z".
INT             = [ "-" ] INT_POSITIVO.
INT_POSITIVO    = DIGITO { DIGITO }.
FLOAT           = [ INT ] "." INT_POSITIVO.
DIGITO          = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".
}"Linguagem CZAR criada por Gustavo Gouveia e Victor Lassance"

