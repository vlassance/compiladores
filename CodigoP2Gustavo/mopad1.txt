PROGRAMA         = FATOS CLAUSULAS METAS
FATOS            = "(" FATO ")" { "(" FATO ")" }
FATO             = IDENT ":-" DADO
CLAUSULAS        = "(" CLAUSULA ")" { "(" CLAUSULA ")" }
METAS            = "(" "?-" PRED DADO ")"
DADO             = ( IDENT | NUM ) { "," ( IDENT | NUM ) }
CLAUSULA         = PRED ARGS ":-" ( "(" LCLAUSULA ")" | DADO )
LCLAUSULA        = LCLAUSULATERMO { "or" LCLAUSULATERMO }
LCLAUSULATERMO   = LCLAUSULAFATOR { "&"  LCLAUSULAFATOR }
LCLAUSULAFATOR   = [ "not" ] "(" INF DADO ")"

ARGS             = { ( INF | IDENT | NUM ) "," } INF

na real... eu nao toh entendendo esse prolog... eu nem tentei entender ainda.. vou tentar agora.. vou tentar escrever um exemplo de codigo..

ARGS             = ( INF | IDENT | NUM ) { "," ( INF | IDENT | NUM ) }
PRED             = IDENT
INF              = IDENT

Q o lexico jah faz: NUM, IDENT==PRED==INF


================== EXEMPLO ==================
# FATOS
(listaFatos :- a, 1, 3)
(fatoSimples :- 3)
(verdades :- verdade)
# CLAUSULAS
(pai a,b :- verdade)                   <-- huaeweaefaeuhfaehuw boa!
(pai b,c :- verdade)                   <-- huaeweaefaeuhfaehuw


ow.. calma.. acho q os fatos vão ser tipo variaveis q guardam dados.. como um vetor (pq pode ter um ou mais valores).. e pode ser encontrado pelo nome..
Ai as clausulas sao chamadas de funcoes..  q ou retornam um dado ou uma expressão.. a expressão tem q ser avaliada em verdadeiro ou falso se ela existe na base ou naum...

(avo X,Y :- (pai X,Z) & (pai Z,Y))
# META
(?- avo pai, pai)
> false

alternativo:
(?- avo a,c ) 
> true


+0123456789+                    Q0      NUM
+0123456789+                    NUM     NUM
+abcdefghijklmnopqrstuvxywz+    Q0      IDENT
+ABCDEFGHIJKLMNOPQRSTUVXYWZ+    Q0      IDENT
+0123456789+                    IDENT    IDENT
+abcdefghijklmnopqrstuvxywz+    IDENT    IDENT
+ABCDEFGHIJKLMNOPQRSTUVXYWZ+    IDENT    IDENT
+()+                            Q0      DELIM
+,+                             Q0      VIRGULA
+?+                             Q0      OPMETA
+-+                             OPMETA  OPMETA_2
+:+                             Q0      OPFATO
+-+                             OPFATO  OPFATO_2 
+&+                             Q0      OPB
+ +                             Q0      SPACE
+        +                       Q0      SPACE
+
+                               Q0      SPACE
+ +                             SPACE   SPACE
+        +                       SPACE   SPACE
+
+                               SPACE   SPACE 
@@                              NUM     Q0 
@@                              IDENT    Q0
@@                              DELIM   Q0
@@                              VIRGULA Q0 
@@                              OPMETA_2 Q0
@@                              OPFATO_2 Q0 
@@                              OPB     Q0 
@@                              SPACE   Q0

